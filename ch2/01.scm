#lang racket
(define (make-rat n d)
  (if (or (and (< n 0) (< d 0)) (and (> n 0) (< d 0)))
    (make-rat (- n) (- d))
    (let ((g (gcd n d)))
     (cons (/ n g) (/ d g)))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print x)
  (display (numer x))
  (display "/")
  (display (denom x))
  (newline))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (denom x) (numer y))))

(define rat13 (make-rat 1 -3))
(print rat13)
(print (add-rat rat13 rat13))

(print (make-rat 1 3))
(print (make-rat -1 -3))
(print (make-rat 1 -3))
(print (make-rat -1 3))

(define *one-half* (make-rat 1 2))
(define *one-third* (make-rat 1 3))
(print (add-rat *one-half* *one-third*))
(print (sub-rat *one-half* *one-third*))
(print (mul-rat *one-half* *one-third*))
(print (div-rat *one-half* *one-third*))
(equal-rat? (sub-rat *one-half* *one-third*)
            (mul-rat *one-half* *one-third*))
