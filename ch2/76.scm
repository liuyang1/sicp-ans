; 显示分派的通用型系统
; 加入一个新类型时候
;       对于每个通用型操作都添加一个对应新类型的判断,并且调用新类型的对应处理函数
; 加入一个新操作时候
;       如果是基本操作,那么则需要在通用类型中添加类型判断代码
;       对于不同的类型分别实现具体的新的操作.


; 数据导向风格
; 加入一个新类型
;       新类型的对应基本操作函数.
;       添加安装数据表格的函数.(但是不需要修改原有的代)码
; 加入一个新操作
;       在每个对应类型中,添加相应的函数.
;       添加安装数据表格代码

; 消息传递风格
; 加入一个新类型
;       实现
;       分派.(但是不需要额外的安装代)码
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   可以看到,消息传递风格,其实和数据导向风格本质是一样的.
;   只是数据导向风格,将所有的函数都安装在同一个表格中.
;   而消息传递风格,相当于对于每个类型,其操作分别安装在自己的一个表格中.
;   这样进一步增强了代码的模块化,而且不需要一个全局性的东西.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 加入一个新操作
;       添加相应的分派代码,对于每个类型


; 经常添加新类型的系统
; 可以使用数据导向或者消息传递风格都可以.
; 经常添加新操作的系统
; 没有理解到二者的区别,感觉消息传递和数据导向差异不大.???TODO
