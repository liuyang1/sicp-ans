(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! p) (set! front-ptr p))
    (define (set-rear-ptr! p) (set! rear-ptr p))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (car (front-ptr)))
    (define (append! item)
      (let ((new-pair (cons item '())))
       (cond ((empty?) (set-front-ptr! new-pair)
                       (set-rear-ptr! new-pair))
             (else (set-cdr! rear-ptr new-pair)
                   (set-rear-ptr! new-pair)))))
    (define (delete!)
      (cond ((empty?)
             (error "DELETE! called with an empty queue"))
            (else
              (set-front-ptr! (cdr front-ptr)))))
    (define (disp)
      (display front-ptr) (newline))
    (define (dispatch m)
      (cond ((eq? m 'empty?)    empty?)
            ((eq? m 'front)     front)
            ((eq? m 'append!)   append!)
            ((eq? m 'delete!)   delete!)
            ((eq? m 'disp)      disp)
            (else
              (error "unkown method" m))))
    dispatch))

; test code
(define (displayln x) (display x) (newline) x)

(define q1 (make-queue))
(displayln ((q1 'empty?)))
((q1 'disp))
((q1 'append!) 'a)
((q1 'disp))
((q1 'append!) 'b)
((q1 'disp))
((q1 'delete!))
((q1 'disp))
((q1 'delete!))
((q1 'disp))
