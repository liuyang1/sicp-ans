(define (displayln x) (display x) (newline) x)

(define (front-ptr dqueue) (car dqueue))
(define (rear-ptr dqueue) (cdr dqueue))
(define (set-front-ptr! dqueue item) (set-car! dqueue item))
(define (set-rear-ptr! dqueue item) (set-cdr! dqueue item))


(define (make-dqueue)
  (cons '() '()))
(define (empty-dqueue? dqueue)
  (null? (front-ptr dqueue)))
(define (front-dqueue dqueue)
  (if (empty-dqueue? dqueue)
    (error "FRONT called with an empty dqueue" dqueue)
    (car (front-ptr dqueue))))
(define (rear-dqueue dqueue)
  (if (empty-dqueue? dqueue)
    (error "REAR called with an empty dqueue" dqueue)
    (car (rear-ptr dqueue))))
(define (front-insert-dqueue! dqueue item)
  (cond ((empty-dqueue? dqueue)
         (let ((new-pair (cons item '())))
          (set-front-ptr! dqueue new-pair)
          (set-rear-ptr! dqueue new-pair)
          dqueue))
        (else
          (set-front-ptr! dqueue (cons item (front-ptr dqueue)))
          dqueue)))
(define (rear-insert-dqueue! dqueue item)
  (let ((new-pair (cons item '())))
   (cond ((empty-dqueue? dqueue)
          (set-front-ptr! dqueue new-pair)
          (set-rear-ptr! dqueue new-pair)
          dqueue)
         (else
           (set-cdr! (rear-ptr dqueue) new-pair)
           (set-rear-ptr! dqueue new-pair)
           dqueue))))
(define (front-delete-dqueue! dqueue)
  (cond ((empty-dqueue? dqueue)
         (error "DELETE! called with an empty dqueue" dqueue))
        (else
          (set-front-ptr! dqueue (cdr (front-ptr dqueue)))
          dqueue)))
(define (last-pair-2 x)
  (if (or (null? x) (null? (cdr x)) (null? (cdr (cdr x)))) x
    (last-pair-2 (cdr x))))
(define (rear-delete-dqueue! dqueue)
  (cond ((empty-dqueue? dqueue)
         (error "REAR-DELETE! called with an empty dqueue" dqueue))
        (else
          (let ((last (last-pair-2 (front-ptr dqueue))))
           (set-cdr! last '())
           (set-rear-ptr! dqueue last)
           dqueue))))

; test code
(define q1 (make-dqueue))
(displayln q1)
(displayln (front-insert-dqueue! q1 'a))
(displayln (front-insert-dqueue! q1 'b))
(displayln (rear-insert-dqueue! q1 'c))

(displayln (rear-delete-dqueue! q1))
(displayln (front-delete-dqueue! q1))
(displayln (front-delete-dqueue! q1))
