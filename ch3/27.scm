(define (make-table)
  (define (same-key? k0 k1)
    (eq? k0 k1))
  (let ((records '()))
   (define (insert! k v)
     (let ((ret (lookup-in k)))
      (if (eq? ret #f)
        (set! records (cons (cons k v) records))
        (begin (set-car! ret k) (set-cdr! ret v)))))
   (define (lookup-in k)
     (define (hlp k rd)
       (cond ((null? rd) #f)
             ((same-key? k (caar rd)) (car rd))
             (else (hlp k (cdr rd)))))
     (hlp k records))
   (define (lookup k)
     (let ((ret (lookup-in k)))
      (if (eq? #f ret) ret (cdr ret))))
   (define (mydisplay)
     (display records) (newline))
   (define (dispatch m) 
     (cond ((eq? m 'lookup) lookup)
           ((eq? m 'insert!) insert!) 
           ((eq? m 'display) mydisplay)
           (else (error "unkown method" m)))) 
   dispatch))

(define (memoize func)
  (let ((table (make-table)))
   (lambda (x)
     (let ((prev ((table 'lookup) x)))
      (or prev
          (let ((ret (func x)))
           ((table 'insert!) x ret)
           ret))))))

(define memo-fib
  (memoize (lambda (n)
           (cond ((= n 0) 0)
                 ((= n 1) 1)
                 (else (+ (memo-fib (- n 1)) (memo-fib (- n 2))))))))

(display (memo-fib 10))
(newline)

; TODO: using MACRO to impl Decorator pattern.
